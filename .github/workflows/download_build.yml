name: Download uuid build
on:
  workflow_call:
    inputs:
      uuid:
        description: 'UUP entry uuid'
        default: 'c598cdd6-8d6a-4fa1-8161-8e96e362b127'
        required: false
        type: string

jobs:
  create-iso:
    name: create iso
    runs-on: windows-latest
    steps:
        - uses: actions/checkout@v4
        - name: Download Commands
          run: |
            curl "https://uupdump.net/get.php?id=${{inputs.uuid}}&pack=en-us&edition=core;coren;professional;professionaln" -X POST -H "Content-Type: application/x-www-form-urlencoded" -d "autodl=2&updates=1" -o download_commands.zip
        - name: unzip download_commands.zip
          run: Expand-Archive download_commands.zip -DestinationPath .
        - name: Set config
          run: copy config.template ConvertConfig.ini
          shell: cmd
        - name: Create iso
          uses: nick-fields/retry@v3
          with:
            max_attempts: 3
            timeout_minutes: 10000
            retry_wait_seconds: 100
            retry_on: error
            shell: cmd
            command: cmd /c .\uup_download_windows.cmd
        - name: Rename result
          shell: cmd
          run: for /D %s in (.\*) do ( if exist %s\setup.exe (ren %s unpacked_dir))
        - uses: actions/setup-python@v5
          with:
            python-version: '3.10'
        - run: python -m pip install pefile tqdm && python ./code/pdb_finding.py unpacked_dir manifest_general.out
        - uses: actions/upload-artifact@v4
          with:
            name: ${{inputs.uuid}}manifest_general.out
            path: manifest_general.out
            retention-days: 1
        - uses: actions/upload-artifact@v4
          with:
            name: ${{inputs.uuid}}install.wim
            path: unpacked_dir/source/install.wim
            retention-days: 1
        - uses: actions/upload-artifact@v4
          with:
            name: ${{inputs.uuid}}boot.wim
            path: unpacked_dir/source/boot.wim
            retention-days: 1

  split-iso:
    runs-on: ubuntu-latest
    needs: create-iso
    outputs:
      split_boot: ${{ steps.split_boot.outputs.version_matrix }}
      split_install: ${{ steps.split_install.outputs.version_matrix }}
    steps:
      - name: Download boot wim
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.uuid }}boot.wim
      - name: Download install wim
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.uuid }}install.wim

      - name: Find boot split
        id: split_boot
        run: bash ./code/split_file.sh boot && cat a.txt >> "$GITHUB_OUTPUT"
      - name: Find install split
        id: split_install
        run: bash ./code/split_file.sh install && cat a.txt >> "$GITHUB_OUTPUT"
      - name: Upload boot wim artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.uuid }}boot.wim
          path: boot.wim
          retention-days: 1
      - name: Upload install wim artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.uuid }}install.wim
          path: install.wim
          retention-days: 1

  parse_boot_wim:
    needs: split-iso
    name: parse boot wim
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJson(needs.split-iso.outputs.split_boot) }}
    steps:
      - uses: actions/checkout@v4
      - name: Installations
        run: sudo apt-get update && xargs sudo apt-get install --no-install-recommends -y < packages.txt && python3 -m pip install pefile tqdm && chmod +x ./code/*
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.uuid }}boot.wim
      - name: Generate boot wim manifest
        run: bash ./code/after_split.sh boot ${{ matrix.version }}
      - name: Archive manifest result
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.uuid }}manifest_boot_${{ matrix.version }}
          path: manifest_boot_${{ matrix.version }}.out

  parse_install_wim:
    needs: split-iso
    name: parse install wim
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJson(needs.split-iso.outputs.split_install) }}
    steps:
      - uses: actions/checkout@v4
      - name: Installations
        run: sudo apt-get update && xargs sudo apt-get install --no-install-recommends -y < packages.txt && python3 -m pip install pefile tqdm && chmod +x ./code/*
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.uuid }}install.wim
      - name: Generate install wim manifest
        run: bash ./code/after_split.sh install ${{ matrix.version }}
      - name: Archive manifest result
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.uuid }}manifest_install_${{ matrix.version }}
          path: manifest_install_${{ matrix.version }}.out


  merge_artifacts:
    needs:
      - parse_boot_wim
      - parse_install_wim
      - create-iso
    runs-on: ubuntu-latest
    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: manifests
        pattern: ${{ inputs.uuid }}manifest*
        merge-multiple: true
    - run: cat ./manifests/* | sort | uniq > manifest.out

    - name: Archive manifest result
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.uuid }}merged_manifest
        path: manifest.out

  deploy_manifest:
    concurrency: deploy_new_version
    needs: merge_artifacts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
      - run: sudo apt-get update && xargs sudo apt-get install --no-install-recommends -y < packages.txt && python3 -m pip install pydantic requests pefile tqdm && chmod +x ./code/*
      - name: Download manifest
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.uuid }}merged_manifest
      - run: mv manifest.out manifests/${{ inputs.uuid }}.manifest
      - run: python code/get_name.py ${{inputs.uuid}} && cat b.txt >> $GITHUB_OUTPUT
        id: get_name
      - run: python -c "import json;out=json.load(open('process_builds.json', 'r'));out.append('${{inputs.uuid}}');json.dump(out, open('process_builds.json', 'w'))"
        name: Add uuid to processt build
      - run: echo "(${{ steps.get_name.outputs.name }})[../manifests/${{ inputs.uuid }}.manifest]" >> docs/versions.md
      - uses: EndBug/add-and-commit@v9
        with:
          add: '["manifests", "docs", "process_builds.json"]'
          message: 'Automated commit, add manifest for ${{inputs.uuid}}'


